<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-11-15T02:33:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>parallel_tests, rspecテストコードのリファクタリング, gitで詰んだかと思った話</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/15/parallel_tests-rspec-refactor-git-fail.html"/>
    <id>http://blog.url.com/2013/11/15/parallel_tests-rspec-refactor-git-fail.html</id>
    <published>2013-11-15T02:33:00Z</published>
    <updated>2013-11-15T16:25:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="toc_0"&gt;parallel_tests を使ってみる&lt;/h1&gt;

&lt;h2 id="toc_1"&gt;プロジェクトではなく、環境にインストール。 -&gt; 微妙な結果に&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="grosser/parallel_tests" href="https://github.com/grosser/parallel_tests#setup-for-non-rails"&gt;Setup for non-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本的にここを参考に。
まずはgemのインストール。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;gem install parallel_tests
&lt;/pre&gt;
&lt;p&gt;次の記述に従って、dbの設定を編集。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="grosser/parallel_tests" href="https://github.com/grosser/parallel_tests#add-to-configdatabaseyml"&gt;Add to config/database.yml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;並列実行の数の指定はここを参考にすると良い。今回はクアッドコアのマシンなので4にした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="Ruby / Rails のテストが約3倍速になって超快適に！！ - #生存戦略 、それは - subtech" href="http://subtech.g.hatena.ne.jp/secondlife/20100819/1282226971"&gt;Ruby / Rails のテストが約3倍速になって超快適に！！ - #生存戦略 、それは - subtech&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;テスト用データベースの準備&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;parallel_rspec -n 4 -e &lt;span class="s1"&gt;&amp;#39;rake db:create&amp;#39;&lt;/span&gt; 
&lt;span class="gp"&gt;$ &lt;/span&gt;parallel_rspec -n 4 -e &lt;span class="s1"&gt;&amp;#39;rake db:test:prepare&amp;#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;実際に走らせる&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;parallel_rspec spec/ -n 4
&lt;/pre&gt;
&lt;p&gt;75秒 -&gt; 45秒に高速化された。んー、思ったほどではない・・・。&lt;/p&gt;

&lt;p&gt;そして、普通にテスト走らせた時にはなかったエラーが・・・。&lt;/p&gt;

&lt;p&gt;やっぱり、プロジェクトにインストールしないとだめか。&lt;/p&gt;

&lt;h1 id="toc_2"&gt;rspecをもっと綺麗に書きたい&lt;/h1&gt;

&lt;p&gt;とても参考になる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="RSpec の入門とその一歩先へ - t-wadaの日記" href="http://d.hatena.ne.jp/t-wada/20100228/p1"&gt;RSpec の入門とその一歩先へ - t-wadaの日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あと、違うデータに対して同じit{..}を実行しているので、その重複を無くしたい。次が参考になりそう。shard examplesを使えばいいっぽい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="すごいぞRSpec(shared example group編) - ぷろぐらまねが" href="http://d.hatena.ne.jp/yohfee/20110222/1298384637"&gt;すごいぞRSpec(shared example group編) - ぷろぐらまねが&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実際の使用例は、次も参考になる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="shared examples - Example groups - RSpec Core - RSpec - Relish" href="https://www.relishapp.com/rspec/rspec-core/docs/example-groups/shared-examples"&gt;shared examples - Example groups - RSpec Core - RSpec - Relish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="toc_3"&gt;Gitで詰んだかと思った&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;あるブランチ(branch-hogeとしよう)をorigin(Github)にpush&lt;/li&gt;
&lt;li&gt;masterの変更を取り込むためにlocalのbranch-hogeで&lt;code&gt;$git rebase master&lt;/code&gt;とする。 &lt;strong&gt;&amp;lt;-ここがそもそもの間違い&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;branch-hogeのコミットを&lt;code&gt;$ git rebase -i&lt;/code&gt;でまとめる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git push origin branch-hoge&lt;/code&gt;とするとエラーになる。2.で履歴が置き換わっているためbranch-hoge@originにpushできない。&lt;/li&gt;
&lt;li&gt;あーrebaseしたからか！と気づいて、&lt;code&gt;$ git reflog&lt;/code&gt;でHEADの履歴を参照するも、&lt;code&gt;rebase -i&lt;/code&gt;でよくわからないことに・・・。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;詰んだかと思いましたが、なんとかリカバった。手順は、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$ git checkout --track origin/branch-hoge&lt;/code&gt;てローカルに追跡ブランチorigin-branch-hogeを作成。&lt;/li&gt;
&lt;li&gt;branch-hogeからorigin-branch-hogeに必要なコミットをcherry-pick。このとき、-nを使うとgit addした状態で追加されていくので、origin-branch-hogeに必要な変更をためていって、最後にコミットすれば良い。&lt;/li&gt;
&lt;li&gt;push可能な変更を追跡ブランチに追加することができたので、&lt;code&gt;$ git push&lt;/code&gt;すると良い。PullReqでautomergeできない場合は、masterを &lt;strong&gt;merge&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="toc_4"&gt;教訓&lt;/h2&gt;

&lt;p&gt;すでにpushしたブランチでrebaseするべからず&lt;/p&gt;

&lt;h1 id="toc_5"&gt;relationで関連オブジェクトを取得するときにunscopedを使いたい&lt;/h1&gt;

&lt;p&gt;ちょっとハマった&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="[rails] うぇぇん、unscopedがきかないよー。 って泣いてたお話 | おれせか" href="http://ichi.fool.jp/blog/?p=1753"&gt;[rails] うぇぇん、unscopedがきかないよー。 って泣いてたお話 | おれせか&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="toc_6"&gt;新知識&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="Rubyで文字列をクラス名として扱うには？ - QA@IT" href="http://qa.atmarkit.co.jp/q/75"&gt;Rubyで文字列をクラス名として扱うには？ - QA@IT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="toc_7"&gt;Gitのpre-commit-hookでテストする&lt;/h1&gt;

&lt;p&gt;&lt;a href="../../../2013/11/14/refactoring-fast-rspec-with-spring.html#toc_6"&gt;昨日のやつ&lt;/a&gt;で思いついたけど、テストの必要ないコミットには、コメントでそのことを示せばいいのでは。頭に&amp;quot;!&amp;ldquo;をつけるとか。試してみようか。&lt;/p&gt;

&lt;h1 id="toc_8"&gt;polymorphicでわからないこと&lt;/h1&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Comment&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:commentable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;polymorphic: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="c1"&gt;# この下を書くのと書かないとでは何が違う？&lt;/span&gt;
  &lt;span class="c1"&gt;# 書いたほうがComment.includes(:article)とかできて良さそうだけど&lt;/span&gt;
  &lt;span class="c1"&gt;# なにか弊害があるんだろうか？&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:article&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;foreign_key: &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;commentable_id&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:picture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;foreign_key: &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;commentable_id&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Article&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:comments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as: :commentable&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Picture&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:comments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as: :commentable&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;belongs_to :parent&lt;/code&gt; があればコードがすんなり書ける気がする。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>リファクタリングについて考えたりとか、rspecの高速化とか</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/14/refactoring-fast-rspec-with-spring.html"/>
    <id>http://blog.url.com/2013/11/14/refactoring-fast-rspec-with-spring.html</id>
    <published>2013-11-14T04:09:00Z</published>
    <updated>2013-11-15T16:25:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="toc_0"&gt;再度リファクタリング&lt;/h1&gt;

&lt;p&gt;ActiveDecoratorで実装してた部分をModelに移す。&amp;lt;- 見た目に関係しないコードはできるだけモデルでやる方針&lt;/p&gt;

&lt;h2 id="toc_1"&gt;方針&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;内部でhelperを使ってないコードとそうでないコードをわける&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id="toc_2"&gt;Springでrspecの高速化&lt;/h1&gt;

&lt;p&gt;単体テストを手動で走らせるのに結構時間かかるので。&lt;/p&gt;

&lt;p&gt;調べると、springというのが良さそう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="jonleighton/spring" href="https://github.com/jonleighton/spring"&gt;jonleighton/spring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;個人でつかうため、プロジェクトのGemfileは使わずにやる方法。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;gem install spring
&lt;span class="gp"&gt;$ &lt;/span&gt;spring rspec
&lt;/pre&gt;
&lt;p&gt;gem バージョンが古いというエラーが出るので、gemのアップデート&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;gem install rubygems-update
&lt;span class="gp"&gt;$ &lt;/span&gt;update_rubygems
&lt;/pre&gt;
&lt;p&gt;次のようにするといいらしい&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;gem pristine --all
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;gem pristine&lt;/code&gt;: gemの隠し場所にあるファイルからインストールしたgemを初期状態へ戻す&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;from: &lt;a title="Rubyのパッケージマネジメントシステムgem(Rubygems)のコマンド一覧" href="http://blog.layer8.sh/ja/2012/04/16/ruby%E3%81%AE%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0gemrubygems%E3%81%AE%E3%82%B3%E3%83%9E%E3%83%B3/"&gt;Rubyのパッケージマネジメントシステムgem(Rubygems)のコマンド一覧&lt;/a&gt;&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;spring rspec hoge_spec.rb
Version: 0.9.2

Usage: spring COMMAND &lt;span class="o"&gt;[&lt;/span&gt;ARGS]

Commands &lt;span class="k"&gt;for &lt;/span&gt;spring itself:
....
&lt;/pre&gt;
&lt;p&gt;あれ・・・？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="jonleighton/spring-commands-rspec" href="https://github.com/jonleighton/spring-commands-rspec"&gt;jonleighton/spring-commands-rspec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こういうのがある&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;gem install spring-commands-rspec
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;~/.spring.rb&lt;/code&gt;に次のように書く&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;spring/commands/rspec&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;spring rspec path/to/hoge_spec.rb
&lt;/pre&gt;
&lt;p&gt;成功。結構速くなって嬉しい。&lt;/p&gt;

&lt;h2 id="toc_3"&gt;参考その１&lt;/h2&gt;

&lt;p&gt;spec_helper等、specファイル中でロードエラーが出る場合。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;spring rspec path/to/hoge_spec.rb
require&lt;span class="s1"&gt;&amp;#39;: cannot load such file -- spec_helper (LoadError)
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;こんな時は、プロジェクトルートで一回&lt;code&gt;spring rspec&lt;/code&gt;を実行しておく&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;spring stop
&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$PROJECT_ROOT&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;spring rspec path/to/hoge_spec.rb
&lt;/pre&gt;
&lt;p&gt;これで、プロジェクトルートをカレントディレクトリとしてspringでrailsが読み込まれるので、requireでパスを正しく読み込める。&lt;/p&gt;

&lt;h2 id="toc_4"&gt;参考その２&lt;/h2&gt;

&lt;p&gt;emacsのrspec-modeで、上記のようにしてspringを使うと、自動ではspringがONにならない。
これはtmpにpidファイルが作られないため。
強制的にspringを使うには、次のように設定する。&lt;/p&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;rspec-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;rspec-spring-p&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;rspec-use-spring-when-possible&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;stringp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;executable-find&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;spring&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ちなみに、rspec-modeでは&lt;code&gt;C-c , v&lt;/code&gt;で開いているファイルに関連するテストだけを走らせる事ができる。&lt;/p&gt;

&lt;h2 id="toc_5"&gt;guard、使ったほうががいいですか&lt;/h2&gt;

&lt;p&gt;guardと組み合わせて使ってる人が多いみたい。guardは以前rails-tutorialやってる時に使ったけど、裏で走り続けるのがCPUの無駄使いにしか思えなくて使わなくなってしまった。guardの結果がエラーでも無視してコーディングすることも多かった。guard使ったほうがいい理由は、書いているコードが意図しない影響をもたらしてしまうことにすぐに気付いて方向修正できることなんだろうけど、commitの前にテストが通るか確認するだけでも十分な気もする。&lt;/p&gt;

&lt;h2 id="toc_6"&gt;Gitのpre-commit-hookでテスト走らせる&lt;/h2&gt;

&lt;p&gt;そんなことを考えていて、Gitのpre-commit-hookでテスト走らせればいいんじゃないかと思いつきました。同じようなことを考えた先達がいたようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="markhazlett/RSpec-Pre-commit-Git-Hook" href="https://github.com/markhazlett/RSpec-Pre-commit-Git-Hook"&gt;markhazlett/RSpec-Pre-commit-Git-Hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title="Matjaz Muhic : git pre-commit hook - commit if all RSpec tests passed" href="https://coderwall.com/p/0uuoaq"&gt;Matjaz Muhic : git pre-commit hook - commit if all RSpec tests passed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コミットにあまりに時間がかかるのは考えものですが、一回やってみてもいいかも。&lt;/p&gt;

&lt;h1 id="toc_7"&gt;Capybaraを使ったテストがOpenSSL::SSL::SSLErrorでコケる&lt;/h1&gt;

&lt;p&gt;omniauthで登録する画面でエラーが出る(OSX 10.9, ruby2.0, rails3.2.12)。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;save_and_open_page&lt;/code&gt;でブラウザ開いてみると、&lt;code&gt;OpenSSL::SSL::SSLError&lt;/code&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="OpenSSL Errors and Rails – Certificate Verify Failed · RailsApps" href="http://railsapps.github.io/openssl-certificate-verify-failed.html"&gt;OpenSSL Errors and Rails – Certificate Verify Failed · RailsApps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここの、Errors with Ruby 2.0 &amp;gt; Alternative の手順で解決。SSL証明書が古くなっていたのが原因のよう。&lt;/p&gt;

&lt;p&gt;kowabanaのローカル環境作った時からコケてて、そういうものかと放置してたのですが、@komagataさんに聞いたところ普通は全部通るとの事だったので、やっぱりか！、と思って調べてみました。&lt;/p&gt;

&lt;h1 id="toc_8"&gt;新知識&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a title="Rubyでクラスメソッドをprivateにする正しい方法 - Hello, world! - s21g" href="http://blog.s21g.com/articles/561"&gt;Rubyでクラスメソッドをprivateにする正しい方法 - Hello, world! - s21g&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a title="Rubyのアクセス制御について(protectとprivate) - おもしろWEBサービス開発日記" href="http://d.hatena.ne.jp/willnet/20080612/1213286518"&gt;Rubyのアクセス制御について(protectとprivate) - おもしろWEBサービス開発日記&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a title="Active Record scopes vs class methods | Plataformatec Blog" href="http://blog.plataformatec.com.br/2013/02/active-record-scopes-vs-class-methods/"&gt;Active Record scopes vs class methods | Plataformatec Blog&lt;/a&gt;
scopeじゃなくてClassMethodではだめなの？という疑問に対して&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>リファクタリング、SQL left join、Rails Model Scope、ベンチマーク</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/13/huga.html"/>
    <id>http://blog.url.com/2013/11/13/huga.html</id>
    <published>2013-11-13T03:31:00Z</published>
    <updated>2013-11-15T16:25:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="toc_0"&gt;リファクタリング&lt;/h1&gt;

&lt;p&gt;先日書いた、ActiveDecoratorを使ったコードをリファクタリングしてみました。Moduleのメソッドに多態性をもたせるには、include元のクラスでメソッドを上書きするといいのかなあと、昨日思いつき・・・。&lt;/p&gt;

&lt;h1 id="toc_1"&gt;SQL left join&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;LEFT JOINとRIGHT JOINは、左右いずれかの表を優先させたいときに指定する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;LEFT JOIN&lt;/p&gt;

&lt;p&gt;左側に指定された表のすべての行が表示される&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RIGHT JOIN&lt;/p&gt;

&lt;p&gt;右側に指定された表のすべての行が表示される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;from: &lt;a href="http://www.pursue.ne.jp/jouhousyo/SQLDoc/select22.html"&gt;http://www.pursue.ne.jp/jouhousyo/SQLDoc/select22.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id="toc_2"&gt;Rails Model Scope&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a title="Ruby on Rails | scopeでModelに検索条件を定義 - tbpg’s programming memo" href="http://d.hatena.ne.jp/tbpg/20130805/1375711757"&gt;Ruby on Rails | scopeでModelに検索条件を定義 - tbpg’s programming memo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a title="Active Record Query Interface — Ruby on Rails Guides" href="http://guides.rubyonrails.org/active_record_querying.html#joining-tables"&gt;Active Record Query Interface — Ruby on Rails Guides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;polymorpic&lt;/code&gt;で関連付けたテーブルをjoinするにはSQL書かないとダメっぽい&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="ruby on rails - ActiveRecord - querying polymorphic associations - Stack Overflow" href="http://stackoverflow.com/questions/680141/activerecord-querying-polymorphic-associations"&gt;ruby on rails - ActiveRecord - querying polymorphic associations - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title="activerecord - Rails joins or preload belongs_to association from polymorphic model - Stack Overflow" href="http://stackoverflow.com/questions/5815139/rails-joins-or-preload-belongs-to-association-from-polymorphic-model"&gt;activerecord - Rails joins or preload belongs_to association from polymorphic model - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a title="Railsで生SQLを書かずにLEFT JOINする方法 - Qiita [キータ]" href="http://qiita.com/unosk/items/403d0fdaf91ca86aa099"&gt;Railsで生SQLを書かずにLEFT JOINする方法 - Qiita [キータ]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これ使うと&lt;/p&gt;
&lt;pre class="highlight text"&gt;ActiveRecord::ConfigurationError: Association named &amp;#39;story&amp;#39; was not found; perhaps you misspelled it?
&lt;/pre&gt;
&lt;p&gt;ってなる。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="toc_3"&gt;rails console でベンチマーク&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="sql - How to get execution time in rails console? - Stack Overflow" href="http://stackoverflow.com/questions/3522250/how-to-get-execution-time-in-rails-console"&gt;sql - How to get execution time in rails console? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Android2.3 デフォルトブラウザでスクロールできなくなるバグ</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/12/scroll-bug-android-2-3-default-browser.html"/>
    <id>http://blog.url.com/2013/11/12/scroll-bug-android-2-3-default-browser.html</id>
    <published>2013-11-12T06:37:00Z</published>
    <updated>2013-11-15T16:25:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a title="Androidのブラウザで特定条件でスクロールできなくなるバグ - ういはるかぜの化学 - subtech" href="http://subtech.g.hatena.ne.jp/mayuki/20120701/1341133778"&gt;Androidのブラウザで特定条件でスクロールできなくなるバグ - ういはるかぜの化学 - subtech&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このブログポストがなかったら詰んでました。&lt;/p&gt;

&lt;p&gt;今のFacebookいいねボタンのiframeのbodyからは&lt;code&gt;overflow:hidden&lt;/code&gt;取り除かれてたんですが、mixiチェックのiframe bodyにはしっかりと記載されており・・・。&lt;/p&gt;

&lt;p&gt;bodyのCSSから&lt;code&gt;overflow:hidden&lt;/code&gt;取り除く、対応していただけるとありがたいです &amp;gt; mixi御中&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>active_decoratorを使ってみた</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/11/rails-active_decorator.html"/>
    <id>http://blog.url.com/2013/11/11/rails-active_decorator.html</id>
    <published>2013-11-11T02:44:00Z</published>
    <updated>2013-11-15T16:25:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;作業週の2週目です。
パーシャルを共通化していろいろなモデルのビューから使えるように、というようなことをやっています。&lt;/p&gt;

&lt;h2 id="toc_0"&gt;active_decoratorをつかってヘルパーをまとめるメモ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a title="active_decorator - よりよいView helperであるActiveDecoratorの使い方 - Qiita [キータ]" href="http://qiita.com/toyoshi/items/205f4006ea85e2919aad"&gt;active_decorator - よりよいView helperであるActiveDecoratorの使い方 - Qiita [キータ]&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;モデル名とは別のdecoratorを作った時には、モデル用のdecoratorの&lt;code&gt;Module do .. end&lt;/code&gt;内で、&lt;code&gt;include HogeHogeDecorator&lt;/code&gt;とすればよい。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="toc_1"&gt;JSのCacheのせいでJSイベントが２回実行されるのにハマった&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="Rails 3.2 の development 環境で javascript が二重に実行されてしまうときの対処方法 - 彼女からは、おいちゃんと呼ばれています" href="http://blog.inouetakuya.info/entry/20120630/1341055121"&gt;Rails 3.2 の development 環境で javascript が二重に実行されてしまうときの対処方法 - 彼女からは、おいちゃんと呼ばれています&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="toc_2"&gt;対処法&lt;/h3&gt;
&lt;pre class="highlight text"&gt;$ bundle exec rake assets:clean RAILS_ENV=development
&lt;/pre&gt;
&lt;p&gt;でpublic/assetsをクリーン&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>TDD</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/08/tdd.html"/>
    <id>http://blog.url.com/2013/11/08/tdd.html</id>
    <published>2013-11-08T10:11:00Z</published>
    <updated>2013-11-15T16:25:38+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://256interns.com/practices/44"&gt;http://256interns.com/practices/44&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今日はTDDのプラクティスやりました。@t_wadaさんの講義すごくためになりました。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://gihyo.jp/dev/serial/01/tdd/0016"&gt;TDDで新しい言語を学ぶ話&lt;/a&gt;、実践してみたい。
&lt;a href="http://gihyo.jp/dev/serial/01/tdd/0020"&gt;テストコードの重複の話&lt;/a&gt;も面白かったです。&lt;/p&gt;

&lt;p&gt;テストの粒度やモックの話など、考え始めるときりがないですが、そこがテストの面白さかなあーと思ったりしています。&lt;/p&gt;
</content>
  </entry>
</feed>

<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-11-30T16:01:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Arel興味あります</title>
    <link rel="alternate" href="http://blog.url.com/2013/12/01/im-interested-in-arel.html"/>
    <id>http://blog.url.com/2013/12/01/im-interested-in-arel.html</id>
    <published>2013-11-30T16:01:00Z</published>
    <updated>2013-12-02T12:47:45+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;最近、怖話のissueのこのコメント読んで（すみません、開発参加者以外は見れません・・）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="add email notification flags to users by nomnel · Pull Request #626 · fjordllc/kowabana" href="https://github.com/fjordllc/kowabana/pull/626#issuecomment-23762718"&gt;add email notification flags to users by nomnel · Pull Request #626 · fjordllc/kowabana&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Arel面白そう、と思って気になっていて調べてみたので、メモ。&lt;/p&gt;

&lt;p&gt;Arel活用して生SQL根絶したい。のと、Arelの動作を理解して、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="amatsuda/arel_ruby" href="https://github.com/amatsuda/arel_ruby"&gt;amatsuda/arel_ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title="tkawa/activerecord-endoscope" href="https://github.com/tkawa/activerecord-endoscope"&gt;tkawa/activerecord-endoscope&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="Rails - ActiveRecordにこういう機能があったらどうでしょう？をgemにしてみた - Qiita [キータ]" href="http://qiita.com/tkawa/items/41d95b0e4ee0c30604ed"&gt;Rails - ActiveRecordにこういう機能があったらどうでしょう？をgemにしてみた - Qiita [キータ]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;のようなクールなプロダクトを作れたら素晴らしいなあと。&lt;/p&gt;

&lt;h2 id="toc_0"&gt;参考文献&lt;/h2&gt;

&lt;h3 id="toc_1"&gt;まずは背景知識などを広く深く。&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="第43回　Rails 3を支える名脇役たち その1 - Arel -｜gihyo.jp … 技術評論社" href="http://gihyo.jp/dev/serial/01/ruby/0043?ard=1385828020"&gt;第43回　Rails 3を支える名脇役たち その1 - Arel -｜gihyo.jp … 技術評論社&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="toc_2"&gt;クエリ組み立てられるようになろう&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="Arelで色んなSQLを組み立ててみる - @ryopeko の何か" href="http://ryopeko.hatenablog.com/entry/20101215/1292373612"&gt;Arelで色んなSQLを組み立ててみる - @ryopeko の何か&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title="AdventCalendar - Arel でサブクエリ - Qiita [キータ]" href="http://qiita.com/tkawa/items/e65c8847e57a5329f336"&gt;AdventCalendar - Arel でサブクエリ - Qiita [キータ]&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;ArelだけでOUTER JOINもできちゃうんですね！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title="Arel::Tableを使ってなるべく生のSQLを書かずに済ます方法 | TechRacho" href="http://techracho.bpsinc.jp/tsunekawa/2013_05_24/8502"&gt;Arel::Tableを使ってなるべく生のSQLを書かずに済ます方法 | TechRacho&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title="予習 Rails3 (1) Arel - I am Bad at Math" href="http://d.hatena.ne.jp/badatmath/20100816/1281997015"&gt;予習 Rails3 (1) Arel - I am Bad at Math&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="toc_3"&gt;使えるようになったなーと思えるようになったら、コードリード、拡張に挑戦する&lt;/h3&gt;

&lt;p&gt;まずは本家&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="rails/arel" href="https://github.com/rails/arel"&gt;rails/arel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;プラグインも参考にしながら&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="amatsuda/arel_ruby" href="https://github.com/amatsuda/arel_ruby"&gt;amatsuda/arel_ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title="tkawa/activerecord-endoscope" href="https://github.com/tkawa/activerecord-endoscope"&gt;tkawa/activerecord-endoscope&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;がんばるんば&lt;/p&gt;

&lt;p&gt;Arel、関係代数を元にSQLを作っちゃうなんてすごいですね。
黒魔術的な魅力と美しい設計に惹かれています。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>RubyのInheritanceとMixinでのメソッドオーバーライド</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/29/ruby-inheritance-and-mixin.html"/>
    <id>http://blog.url.com/2013/11/29/ruby-inheritance-and-mixin.html</id>
    <published>2013-11-29T12:48:00Z</published>
    <updated>2013-12-02T12:47:45+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="../../../2013/11/22/rails-sass-sourcemap.html#toc_1"&gt;mixinでのメソッドオーバーライドの検証&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上の記事で、メソッドオーバーライドが予想通りに動かなくて悩んでいたのだけれど、以下のように子クラスへの&lt;code&gt;include&lt;/code&gt;を先に書くと、想定の動作となった。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Successor&lt;/span&gt;&lt;span class="nf"&gt;.class_eval&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Override1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;&lt;span class="nf"&gt;.class_eval&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Override1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;&lt;span class="nf"&gt;.new.overridden&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; &amp;#39;original&amp;#39;&lt;/span&gt;
&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Successor&lt;/span&gt;&lt;span class="nf"&gt;.new.overridden&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; &amp;#39;override 1&amp;#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;上記記事で取り組んでいたGemのソースも確かに子クラスへの&lt;code&gt;include&lt;/code&gt;が先に書かれている。
親クラスに先にincldeしてしまうと、子クラスへのincludeが無効になってしまうよう。&lt;/p&gt;

&lt;p&gt;まさか順番の違いが原因だとは思わなかったなあ。灯台下暗し。
なぜこういう動作になるのかまだよくわかってないが、もうちょっと調べてみよう。&lt;/p&gt;

&lt;p&gt;あと、Ruby2.0からはこんな場合に&lt;code&gt;prepend&lt;/code&gt;を使うといいらしい。というか、&lt;code&gt;alias_method_chain&lt;/code&gt;使うのが普通なのか。PullReq送りなおしてみるか・・・。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="Module#prepend | TECHSCORE(テックスコア)" href="http://www.techscore.com/tech/Ruby/ruby-2.0/prepend/"&gt;Module#prepend | TECHSCORE(テックスコア)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title="» Ruby2.0のModule#prependは如何にしてalias_method_chainを撲滅するのか！？ TECHSCORE BLOG" href="http://www.techscore.com/blog/2013/01/22/ruby2-0%E3%81%AEmodule-prepend%E3%81%AF%E5%A6%82%E4%BD%95%E3%81%AB%E3%81%97%E3%81%A6alias_method_chain%E3%82%92%E6%92%B2%E6%BB%85%E3%81%99%E3%82%8B%E3%81%AE%E3%81%8B%EF%BC%81%EF%BC%9F/"&gt;» Ruby2.0のModule#prependは如何にしてalias_method_chainを撲滅するのか！？ TECHSCORE BLOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記リンク、関数検索の優先順位についても書かれていて勉強になる。&lt;/p&gt;

&lt;p&gt;今週は作業週だったんだけれど体調を崩してしまって半分くらいしか活動できなかった。kowabanaの開発は勉強になることが多いのでちょともったいない。&lt;/p&gt;

&lt;p&gt;[追記:2013-11-30]&lt;/p&gt;

&lt;p&gt;上記の動作の原因を追ってみた。まず、&lt;code&gt;Class::ancestor&lt;/code&gt;でクラスの継承・Mixin関係を見ることができるみたいなので、子クラス、親クラスの&lt;code&gt;include&lt;/code&gt;順、それぞれの場合で見てみる。以前の検証コードよりも簡略化している。&lt;/p&gt;

&lt;p&gt;まずは、親クラスに先に&lt;code&gt;include&lt;/code&gt;する場合。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Original&lt;/span&gt;
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;overridden&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;original&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Successor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Original&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Override1&lt;/span&gt;
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;overridden&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;override 1&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;#親クラスに先にinclude&lt;/span&gt;
&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="nf"&gt;.class_eval&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Override1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Successor&lt;/span&gt;&lt;span class="nf"&gt;.class_eval&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Override1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="nf"&gt;.ancestors&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; [Original, Override1, Object, Kernel, BasicObject]&lt;/span&gt;
&lt;span class="no"&gt;Successor&lt;/span&gt;&lt;span class="nf"&gt;.ancestors&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; [Successor, Original, Override1, Object, Kernel, BasicObject]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;次に、子クラスに先に&lt;code&gt;include&lt;/code&gt;する場合。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Original&lt;/span&gt;
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;overridden&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;original&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Successor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Original&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Override1&lt;/span&gt;
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;overridden&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;override 1&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;#子クラスに先にinclude&lt;/span&gt;
&lt;span class="no"&gt;Successor&lt;/span&gt;&lt;span class="nf"&gt;.class_eval&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Override1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="nf"&gt;.class_eval&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Override1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="nf"&gt;.ancestors&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; [Original, Override1, Object, Kernel, BasicObject]&lt;/span&gt;
&lt;span class="no"&gt;Successor&lt;/span&gt;&lt;span class="nf"&gt;.ancestors&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; [Successor, Override1, Original, Override1, Object, Kernel, BasicObject]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Successorの継承関係に注目。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="c1"&gt;# 親クラスに先にinclude&lt;/span&gt;
&lt;span class="no"&gt;Successor&lt;/span&gt;&lt;span class="nf"&gt;.ancestors&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; [Successor, Original, Override1, Object, Kernel, BasicObject]&lt;/span&gt;
&lt;span class="c1"&gt;# 子クラスに先にinclude 二つ目のOverride1が追加されている&lt;/span&gt;
&lt;span class="no"&gt;Successor&lt;/span&gt;&lt;span class="nf"&gt;.ancestors&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; [Successor, Override1 , Original, Override1, Object, Kernel, BasicObject]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;やっぱり、先にincludeするのが子クラスか親クラスによってメソッドの探索順が変わってくるよう。&lt;/p&gt;

&lt;p&gt;このへん、rubyのソース見たら何か分かるのかなーと思ってソースを追ってみたら、そのものズバリのコメントがあった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="ruby/class.c at 8b0771b0142dffb45dd0d7fc18f6c2868eeb2b3b · ruby/ruby" href="https://github.com/ruby/ruby/blob/8b0771b0142dffb45dd0d7fc18f6c2868eeb2b3b/class.c#L862"&gt;ruby/class.c at 8b0771b0142dffb45dd0d7fc18f6c2868eeb2b3b · ruby/ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;親クラスに&lt;code&gt;include&lt;/code&gt;されているモジュールは子クラスで&lt;code&gt;include&lt;/code&gt;できない仕様となっているよう。
このコメントと仕様を実現するロジックが加えられたコミットは次になる(Git)。&lt;/p&gt;
&lt;pre class="highlight text"&gt;commit 6f1c934bc361ec5d01a0b4b1a45d07840af02dc3
Author: matz &amp;lt;matz@b2dd03c8-39d4-4d8f-98ff-823fe69b080e&amp;gt;
Date:   Tue Nov 7 08:56:18 2006 +0000

    * class.c (rb_include_module): revert duplicate inclusio
      modules.  [ruby-dev:29793]
&lt;/pre&gt;
&lt;p&gt;ruby-devのスレッドに仕様の議論がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="‎blade.nagaokaut.ac.jp/cgi-bin/vframe.rb/ruby/ruby-dev/29793?29793-35143" href="http://blade.nagaokaut.ac.jp/cgi-bin/vframe.rb/ruby/ruby-dev/29793?29793-35143"&gt;‎blade.nagaokaut.ac.jp/cgi-bin/vframe.rb/ruby/ruby-dev/29793?29793-35143&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Railsのsanitizeヘルパーで違反タグを削除するのではなくエスケープする</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/28/rails-helper-sanitize-escape-bad-tags-instead-of-remove.html"/>
    <id>http://blog.url.com/2013/11/28/rails-helper-sanitize-escape-bad-tags-instead-of-remove.html</id>
    <published>2013-11-28T05:57:00Z</published>
    <updated>2013-12-02T12:47:45+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Railsのsanitizeヘルパーでは、ホワイトリストに登録されているタグ以外は削除される。この仕様だと、&lt;code&gt;sanitize &amp;quot;(&amp;gt;_&amp;lt;)なんと！(&amp;gt;_&amp;lt;)&amp;quot;&lt;/code&gt;は&lt;code&gt;(&amp;gt;__&amp;lt;)&lt;/code&gt;となってしまい、好ましくない。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;confing/initializers/escape_to_sanitize.rb&lt;/code&gt;などに以下のように書いて、違反タグを削除ではなくエスケープする仕様としてみた。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cgi&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Escape bad tags when sanitized, instead of remove.&lt;/span&gt;
&lt;span class="no"&gt;HTML&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Sanitizer&lt;/span&gt;&lt;span class="nf"&gt;.class_eval&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kp"&gt;protected&lt;/span&gt;
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tokenizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;HTML&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Tokenizer&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="nf"&gt;.next&lt;/span&gt;
      &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;HTML&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Node&lt;/span&gt;&lt;span class="nf"&gt;.parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;process_node&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;
      &lt;span class="c1"&gt;# replace bad tags with escaped HTML&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="nf"&gt;.last.nil?&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="nf"&gt;.length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;CGI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;escapeHTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;テストしてないので、意図しないバグがあるかもしれない。&lt;/p&gt;

&lt;p&gt;他に &lt;a title="rgrove/sanitize" href="https://github.com/rgrove/sanitize"&gt;rgrove/sanitize&lt;/a&gt; などを使っても良いと思う。これは、rails標準のsanitizerより柔軟な設定ができるというもので、上記のような要件なら、&lt;a title="Transfomers" href="https://github.com/rgrove/sanitize?source=cc#transformers-1"&gt;Transfomers&lt;/a&gt;をゴニョゴニョすれば実現できそう。&lt;/p&gt;

&lt;p&gt;参考）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="ruby on rails - Rails3 sanitize escape HTML rather than remove - Stack Overflow" href="http://stackoverflow.com/questions/6039128/rails3-sanitize-escape-html-rather-than-remove"&gt;ruby on rails - Rails3 sanitize escape HTML rather than remove - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>RailsでSass Sourcemapを使ってみる</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/22/rails-sass-sourcemap.html"/>
    <id>http://blog.url.com/2013/11/22/rails-sass-sourcemap.html</id>
    <published>2013-11-22T09:46:00Z</published>
    <updated>2013-12-02T12:47:45+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Rails4だと、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="vhyza/sass-rails-source-maps" href="https://github.com/vhyza/sass-rails-source-maps"&gt;vhyza/sass-rails-source-maps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を使うと、最新のChromeでSassのSourcemap(v3)が使える&lt;/p&gt;

&lt;p&gt;Gemfileに&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="ss"&gt;:development&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:test&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sass-rails-source-maps&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;と書いて、&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;bundle update sass
&lt;/pre&gt;
&lt;p&gt;として、サーバをリスタート。ChromeのDeveloper Tools &amp;gt; 設定（ギアアイコン） &amp;gt; General &amp;gt; Enable CSS source maps をオンにしておく。
これで、通常どおりの要素のインスペクトでscssファイルが表示されるはず(*.sassには未対応なのか普通のcssが表示される)。&lt;/p&gt;

&lt;p&gt;参考:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="How to make Chrome understand the Sass/SCSS in your rails app | fonicmonkey" href="http://fonicmonkey.net/2013/03/25/native-sass-scss-source-map-support-in-chrome-and-rails/"&gt;How to make Chrome understand the Sass/SCSS in your rails app | fonicmonkey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[追記:2013-11-23]&lt;/p&gt;

&lt;p&gt;Safari7でも同様にscssのインスペクトができた。&lt;/p&gt;

&lt;p&gt;さらに追記。*.sassファイルのSourcemapが作られないのは、どうやらSprocketsのメソッドのオーバーライドに失敗してるかららしい。RubyのインスタンスメソッドをModuleのメソッドでオーバーライドするにはちょっとしたノウハウが必要らしい。&lt;/p&gt;

&lt;p&gt;参考:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="rails で Mix-in するときにすでにあるメソッドをオーバーライドする - 情報建築学って何さ?" href="http://d.hatena.ne.jp/ckazu/20110523/1306152825"&gt;rails で Mix-in するときにすでにあるメソッドをオーバーライドする - 情報建築学って何さ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title="Ruby: how to override class method with a module - Byte Friendly" href="http://tech.tulentsev.com/2012/02/ruby-how-to-override-class-method-with-a-module/"&gt;Ruby: how to override class method with a module - Byte Friendly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*.scssの場合に動いてるのは、&lt;a title="sprockets/lib/sprockets/scss_template.rb at 81ee87fba59d79f9fa7b8a987c649e0125866e7f · sstephenson/sprockets" href="https://github.com/sstephenson/sprockets/blob/81ee87fba59d79f9fa7b8a987c649e0125866e7f/lib/sprockets/scss_template.rb"&gt;Sprockets::ScssTemplate&lt;/a&gt;が&lt;a title="sprockets/lib/sprockets/sass_template.rb at 81ee87fba59d79f9fa7b8a987c649e0125866e7f · sstephenson/sprockets" href="https://github.com/sstephenson/sprockets/blob/81ee87fba59d79f9fa7b8a987c649e0125866e7f/lib/sprockets/sass_template.rb"&gt;Sprockets::SassTemplate&lt;/a&gt;を継承していて、定義にはメソッドがないから、includeしたモジュールのメソッドが優先されるためかな・・・。&lt;a href="#toc_1"&gt;*1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ということで、Pullreqを送ってみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="Fix overriding Sprockets::SassTemplate#evaluate by yukihr · Pull Request #1 · vhyza/sass-rails-source-maps" href="https://github.com/vhyza/sass-rails-source-maps/pull/1"&gt;Fix overriding Sprockets::SassTemplate#evaluate by yukihr · Pull Request #1 · vhyza/sass-rails-source-maps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pullreq送るときは緊張する・・・。&lt;/p&gt;

&lt;h2 id="toc_0"&gt;Compassを一緒に使う場合、バージョンに注意&lt;/h2&gt;

&lt;p&gt;sass-rails-source-mapsがsassの3.3.0.alpha以上に依存しているので、Gemfileで次のようにバージョン指定する。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;compass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;~&amp;gt; 0.13.alpha.10&amp;#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;あと、余談ですが、compass-railsというGemを使えば設定なしでCompassが使えるはずなんだけど、&lt;/p&gt;
&lt;pre class="highlight text"&gt;`require&amp;#39;: cannot load such file -- sass/script/node (LoadError) 
&lt;/pre&gt;
&lt;p&gt;とか、compassのimportエラーが出てうまく行かない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="Rails4 beta さわってみたメモ #railshackathon - 130単位" href="http://d.hatena.ne.jp/deeeki/20121124/rails4_1st_impression"&gt;Rails4 beta さわってみたメモ #railshackathon - 130単位&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にあるように、initializers/compass.rbなどに&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="nf"&gt;.configuration.assets.paths&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Compass&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Frameworks&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;compass&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;.stylesheets_directory&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;と書くことでCompassが使えるようになった。&lt;/p&gt;

&lt;h2 id="toc_1"&gt;*1&lt;/h2&gt;

&lt;p&gt;の検証のために次のようなコードを書いてみたが、予想と異なる結果に。こうなると、元のコードがどうして動いているのかがわからない。デバッガも入れて動作を追ってみたけれど、結局分からずじまい。見逃している点がありそうで不安。まあ、間違ってたらPullreqのDiscussionで指摘してくれるだろう。&lt;/p&gt;

&lt;p&gt;&lt;a href="../../../2013/11/29/ruby-inheritance-and-mixin.html"&gt;追記：予想通りの動作が再現出来ました&lt;/a&gt;&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Original&lt;/span&gt;
  &lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Klass&lt;/span&gt;
    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;overridden&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;original&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Successor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Klass&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;&lt;span class="nf"&gt;.new.overridden&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; &amp;#39;original&amp;#39;&lt;/span&gt;
&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Successor&lt;/span&gt;&lt;span class="nf"&gt;.new.overridden&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; &amp;#39;original&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Override1&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Override1&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Klass&lt;/span&gt;
    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;overridden&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;override 1&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;&lt;span class="nf"&gt;.class_eval&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Override1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Successor&lt;/span&gt;&lt;span class="nf"&gt;.class_eval&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Override1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;&lt;span class="nf"&gt;.new.overridden&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; &amp;#39;original&amp;#39;&lt;/span&gt;
&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Successor&lt;/span&gt;&lt;span class="nf"&gt;.new.overridden&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; &amp;#39;original&amp;#39; ここがoverride1になると期待してた :(&lt;/span&gt;

&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Override2&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Override2&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Klass&lt;/span&gt;
    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;included&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;
      &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="nf"&gt;.class_eval&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;overridden&lt;/span&gt;
          &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;override 2&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;&lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:include&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Override2&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Original::Successor.send(:include, Override2::Klass) # This isnt needed&lt;/span&gt;

&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;&lt;span class="nf"&gt;.new.overridden&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; &amp;#39;override 2&amp;#39;&lt;/span&gt;
&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Successor&lt;/span&gt;&lt;span class="nf"&gt;.new.overridden&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; &amp;#39;override 2&amp;#39;&lt;/span&gt;
&lt;/pre&gt;</content>
  </entry>
  <entry>
    <title>heroku-hk</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/22/heroku-hk.html"/>
    <id>http://blog.url.com/2013/11/22/heroku-hk.html</id>
    <published>2013-11-22T03:27:00Z</published>
    <updated>2013-12-02T12:47:45+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;HerokuのhkというCLIクライアントがGoで書かれていて高速でいいらしい、ので使ってみる。&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Heroku が公式 CLI に Go を採用。クロスプラットフォームだし、速いしという Go のメリットが生かされている。 &lt;a href="https://twitter.com/search?q=%23golangjp&amp;amp;src=hash"&gt;#golangjp&lt;/a&gt; / “heroku/hk · GitHub” &lt;a href="http://t.co/iW4n0Gaq7G"&gt;http://t.co/iW4n0Gaq7G&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jxck (@Jxck_) &lt;a href="https://twitter.com/Jxck_/statuses/393170112330477569"&gt;October 24, 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;公式の手順通りにやって躓いたところはなかった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="heroku/hk" href="https://github.com/heroku/hk#installation"&gt;heroku/hk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ heroku apps&lt;/code&gt;より&lt;code&gt;$ hk apps&lt;/code&gt;のほうが約三倍速くなって良い感じ。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Mavericksでlibv8 Gemでビルドエラー</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/20/mavericks-gem-libv8-build-error.html"/>
    <id>http://blog.url.com/2013/11/20/mavericks-gem-libv8-build-error.html</id>
    <published>2013-11-20T09:06:00Z</published>
    <updated>2013-12-02T12:47:45+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;最新版では解決されてるらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="rubygems - Installing libv8 gem on Mavericks - Stack Overflow" href="http://stackoverflow.com/questions/19577759/installing-libv8-gem-on-mavericks"&gt;rubygems - Installing libv8 gem on Mavericks - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gemfile.lockを見ると、therubyracerがlibv8のビルドエラーが出るバージョンに依存している。therubyracerのバージョンを最新にして解決。&lt;/p&gt;
</content>
  </entry>
</feed>

<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-11-22T09:46:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>RailsでSass Sourcemapを使ってみる</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/22/rails-sass-sourcemap.html"/>
    <id>http://blog.url.com/2013/11/22/rails-sass-sourcemap.html</id>
    <published>2013-11-22T09:46:00Z</published>
    <updated>2013-11-22T10:07:09+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Railsだと、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="vhyza/sass-rails-source-maps" href="https://github.com/vhyza/sass-rails-source-maps"&gt;vhyza/sass-rails-source-maps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を使うと、最新のChromeでSassのSourcemapが使える&lt;/p&gt;

&lt;p&gt;Gemfileに&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="ss"&gt;:development&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:test&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sass-rails-source-maps&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;と書いて、&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;bundle update sass
&lt;/pre&gt;
&lt;p&gt;とする。&lt;/p&gt;

&lt;p&gt;environments/development.rb で&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="nf"&gt;.sass.debug_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="nf"&gt;.sass.line_comments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;# source maps don&amp;#39;t get output if this is true&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;として、サーバをリスタート。ChromeのDeveloper Tools &amp;gt; 設定（ギアアイコン） &amp;gt; General &amp;gt; Enable CSS source maps をオンにしておく。
これで、通常どおりの要素のインスペクトでscssファイルが表示されるはず(*.sassには未対応なのか普通のcssが表示される)。&lt;/p&gt;

&lt;h2 id="toc_0"&gt;Compassを一緒に使う場合、バージョンに注意&lt;/h2&gt;

&lt;p&gt;sass-rails-source-mapsがsassの3.3.0.alpha以上に依存しているので、Gemfileで次のようにバージョン指定する。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;compass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;~&amp;gt; 0.13.alpha.10&amp;#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;あと、余談ですが、compass-railsというGemを使えば設定なしでCompassが使えるはずなんだけど、&lt;/p&gt;
&lt;pre class="highlight text"&gt;`require&amp;#39;: cannot load such file -- sass/script/node (LoadError) 
&lt;/pre&gt;
&lt;p&gt;とか、compassのimportエラーが出てうまく行かない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="Rails4 beta さわってみたメモ #railshackathon - 130単位" href="http://d.hatena.ne.jp/deeeki/20121124/rails4_1st_impression"&gt;Rails4 beta さわってみたメモ #railshackathon - 130単位&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にあるように、initializers/compass.rbなどに&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="nf"&gt;.configuration.assets.paths&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Compass&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Frameworks&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;compass&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;.stylesheets_directory&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;と書くことでCompassが使えるようになった。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>heroku-hk</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/22/heroku-hk.html"/>
    <id>http://blog.url.com/2013/11/22/heroku-hk.html</id>
    <published>2013-11-22T03:27:00Z</published>
    <updated>2013-11-22T10:07:09+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;HerokuのhkというCLIクライアントがGoで書かれていて高速でいいらしい、ので使ってみる。&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Heroku が公式 CLI に Go を採用。クロスプラットフォームだし、速いしという Go のメリットが生かされている。 &lt;a href="https://twitter.com/search?q=%23golangjp&amp;amp;src=hash"&gt;#golangjp&lt;/a&gt; / “heroku/hk · GitHub” &lt;a href="http://t.co/iW4n0Gaq7G"&gt;http://t.co/iW4n0Gaq7G&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jxck (@Jxck_) &lt;a href="https://twitter.com/Jxck_/statuses/393170112330477569"&gt;October 24, 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;公式の手順通りにやって躓いたところはなかった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="heroku/hk" href="https://github.com/heroku/hk#installation"&gt;heroku/hk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ heroku apps&lt;/code&gt;より&lt;code&gt;$ hk apps&lt;/code&gt;のほうが約三倍速くなって良い感じ。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Mavericksでlibv8 Gemでビルドエラー</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/20/mavericks-gem-libv8-build-error.html"/>
    <id>http://blog.url.com/2013/11/20/mavericks-gem-libv8-build-error.html</id>
    <published>2013-11-20T09:06:00Z</published>
    <updated>2013-11-22T10:07:09+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;最新版では解決されてるらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="rubygems - Installing libv8 gem on Mavericks - Stack Overflow" href="http://stackoverflow.com/questions/19577759/installing-libv8-gem-on-mavericks"&gt;rubygems - Installing libv8 gem on Mavericks - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gemfile.lockを見ると、therubyracerがlibv8のビルドエラーが出るバージョンに依存している。therubyracerのバージョンを最新にして解決。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>そろそろ１ヶ月</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/18/polymorphic-includes-joins-eager-loading.html"/>
    <id>http://blog.url.com/2013/11/18/polymorphic-includes-joins-eager-loading.html</id>
    <published>2013-11-18T05:40:00Z</published>
    <updated>2013-11-22T10:07:09+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;はやいもので、ローカルインターンに来始めてからもうすぐ1ヶ月です。
時が立つのは早い。次何するかそろそろ決めないと・・・。&lt;/p&gt;

&lt;h1 id="toc_0"&gt;polymorphicでのincludesとjoinについて&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="../../../2013/11/15/parallel_tests-rspec-refactor-git-fail.html#toc_8"&gt;polymorphicでわからないこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の続き。今までに理解できたことをまとめてみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/16124295/1015770"&gt;http://stackoverflow.com/a/16124295/1015770&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にあるように、&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Comment&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:commentable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;polymorphic: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:article&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;foreign_key: &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;comemntable_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;conditions: &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;comments.commentable_type = &amp;#39;Article&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;のように書いておけば、commentオブジェクトのうち、&lt;code&gt;commentable_type&lt;/code&gt;が&lt;code&gt;Article&lt;/code&gt;のものについては、&lt;code&gt;comment.article&lt;/code&gt;でarticleオブジェクトにアクセスできる。さらに、&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;comments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="nf"&gt;.includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:article&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;articles.user_id = 10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;のようなクエリを発行することも可能になる。これによって、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="joins オプションとinclude オプションの決定的な違い - mic_footprints" href="http://d.hatena.ne.jp/micdonalds/20101115/1289819697"&gt;joins オプションとinclude オプションの決定的な違い - mic_footprints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にあるように、&lt;code&gt;includes&lt;/code&gt;の長所(あまり詳しくないがeager loadingというらしい)を活用することができる。&lt;/p&gt;

&lt;p&gt;ただ、&lt;code&gt;article&lt;/code&gt;オブジェクトを用いる必要があまりない場合、つまり、&lt;code&gt;article&lt;/code&gt;の情報をCommentのクエリのみに用いる場合は、&lt;code&gt;joins&lt;/code&gt;で&lt;code&gt;left join&lt;/code&gt;を使う以下の説明にあるコードのほうが、簡潔なSQLを発行出来て(comment.commentableに何回もアクセスしない場合は)速度的にも有利。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/5815612/1015770"&gt;http://stackoverflow.com/a/5815612/1015770&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;クエリの結果をどのように利用するかで、最適解が変わってくるということかな・・。&lt;/p&gt;

&lt;p&gt;ご意見、ツッコミお待ちしております＞＜&lt;/p&gt;

&lt;h1 id="toc_1"&gt;eager loadingについて調べてみる。&lt;/h1&gt;

&lt;p&gt;せっかくeager loadingが出てきたので、掘り下げて調べてみる。とりあえず参考リンク。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="eager loadingって何？ - おもしろWEBサービス開発日記" href="http://d.hatena.ne.jp/willnet/20090303/1236093728"&gt;eager loadingって何？ - おもしろWEBサービス開発日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title="#22 Eager Loading (revised) - RailsCasts" href="http://railscasts.com/episodes/22-eager-loading-revised"&gt;#22 Eager Loading (revised) - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title="Ruby on Rails を高速化する" href="http://www.ibm.com/developerworks/jp/opensource/library/os-railsn1/"&gt;Ruby on Rails を高速化する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>parallel_tests, rspecテストコードのリファクタリング, gitで詰んだかと思った話</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/15/parallel_tests-rspec-refactor-git-fail.html"/>
    <id>http://blog.url.com/2013/11/15/parallel_tests-rspec-refactor-git-fail.html</id>
    <published>2013-11-15T02:33:00Z</published>
    <updated>2013-11-22T10:07:09+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="toc_0"&gt;parallel_tests を使ってみる&lt;/h1&gt;

&lt;h2 id="toc_1"&gt;プロジェクトではなく、環境にインストール。 -&gt; 微妙な結果に&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="grosser/parallel_tests" href="https://github.com/grosser/parallel_tests#setup-for-non-rails"&gt;Setup for non-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本的にここを参考に。
まずはgemのインストール。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;gem install parallel_tests
&lt;/pre&gt;
&lt;p&gt;次の記述に従って、dbの設定を編集。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="grosser/parallel_tests" href="https://github.com/grosser/parallel_tests#add-to-configdatabaseyml"&gt;Add to config/database.yml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;並列実行の数の指定はここを参考にすると良い。今回はクアッドコアのマシンなので4にした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="Ruby / Rails のテストが約3倍速になって超快適に！！ - #生存戦略 、それは - subtech" href="http://subtech.g.hatena.ne.jp/secondlife/20100819/1282226971"&gt;Ruby / Rails のテストが約3倍速になって超快適に！！ - #生存戦略 、それは - subtech&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;テスト用データベースの準備&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;parallel_rspec -n 4 -e &lt;span class="s1"&gt;&amp;#39;rake db:create&amp;#39;&lt;/span&gt; 
&lt;span class="gp"&gt;$ &lt;/span&gt;parallel_rspec -n 4 -e &lt;span class="s1"&gt;&amp;#39;rake db:test:prepare&amp;#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;実際に走らせる&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;parallel_rspec spec/ -n 4
&lt;/pre&gt;
&lt;p&gt;75秒 -&gt; 45秒に高速化された。んー、思ったほどではない・・・。&lt;/p&gt;

&lt;p&gt;そして、普通にテスト走らせた時にはなかったエラーが・・・。&lt;/p&gt;

&lt;p&gt;やっぱり、プロジェクトにインストールしないとだめか。&lt;/p&gt;

&lt;h1 id="toc_2"&gt;rspecをもっと綺麗に書きたい&lt;/h1&gt;

&lt;p&gt;とても参考になる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="RSpec の入門とその一歩先へ - t-wadaの日記" href="http://d.hatena.ne.jp/t-wada/20100228/p1"&gt;RSpec の入門とその一歩先へ - t-wadaの日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あと、違うデータに対して同じit{..}を実行しているので、その重複を無くしたい。次が参考になりそう。shard examplesを使えばいいっぽい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="すごいぞRSpec(shared example group編) - ぷろぐらまねが" href="http://d.hatena.ne.jp/yohfee/20110222/1298384637"&gt;すごいぞRSpec(shared example group編) - ぷろぐらまねが&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実際の使用例は、次も参考になる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="shared examples - Example groups - RSpec Core - RSpec - Relish" href="https://www.relishapp.com/rspec/rspec-core/docs/example-groups/shared-examples"&gt;shared examples - Example groups - RSpec Core - RSpec - Relish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="toc_3"&gt;Gitで詰んだかと思った&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;あるブランチ(branch-hogeとしよう)をorigin(Github)にpush&lt;/li&gt;
&lt;li&gt;masterの変更を取り込むためにlocalのbranch-hogeで&lt;code&gt;$git rebase master&lt;/code&gt;とする。 &lt;strong&gt;&amp;lt;-ここがそもそもの間違い&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;branch-hogeのコミットを&lt;code&gt;$ git rebase -i&lt;/code&gt;でまとめる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git push origin branch-hoge&lt;/code&gt;とするとエラーになる。2.で履歴が置き換わっているためbranch-hoge@originにpushできない。&lt;/li&gt;
&lt;li&gt;あーrebaseしたからか！と気づいて、&lt;code&gt;$ git reflog&lt;/code&gt;でHEADの履歴を参照するも、&lt;code&gt;rebase -i&lt;/code&gt;でよくわからないことに・・・。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;詰んだかと思いましたが、なんとかリカバった。手順は、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$ git checkout --track origin/branch-hoge&lt;/code&gt;てローカルに追跡ブランチorigin-branch-hogeを作成。&lt;/li&gt;
&lt;li&gt;branch-hogeからorigin-branch-hogeに必要なコミットをcherry-pick。このとき、-nを使うとgit addした状態で追加されていくので、origin-branch-hogeに必要な変更をためていって、最後にコミットすれば良い。&lt;/li&gt;
&lt;li&gt;push可能な変更を追跡ブランチに追加することができたので、&lt;code&gt;$ git push&lt;/code&gt;すると良い。PullReqでautomergeできない場合は、masterを &lt;strong&gt;merge&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="toc_4"&gt;教訓&lt;/h2&gt;

&lt;p&gt;すでにpushしたブランチでrebaseするべからず&lt;/p&gt;

&lt;h1 id="toc_5"&gt;relationで関連オブジェクトを取得するときにunscopedを使いたい&lt;/h1&gt;

&lt;p&gt;ちょっとハマった&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="[rails] うぇぇん、unscopedがきかないよー。 って泣いてたお話 | おれせか" href="http://ichi.fool.jp/blog/?p=1753"&gt;[rails] うぇぇん、unscopedがきかないよー。 って泣いてたお話 | おれせか&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="toc_6"&gt;新知識&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="Rubyで文字列をクラス名として扱うには？ - QA@IT" href="http://qa.atmarkit.co.jp/q/75"&gt;Rubyで文字列をクラス名として扱うには？ - QA@IT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="toc_7"&gt;Gitのpre-commit-hookでテストする&lt;/h1&gt;

&lt;p&gt;&lt;a href="../../../2013/11/14/refactoring-fast-rspec-with-spring.html#toc_6"&gt;昨日のやつ&lt;/a&gt;で思いついたけど、テストの必要ないコミットには、コメントでそのことを示せばいいのでは。頭に&amp;quot;!&amp;ldquo;をつけるとか。試してみようか。&lt;/p&gt;

&lt;h1 id="toc_8"&gt;polymorphicでわからないこと&lt;/h1&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Comment&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:commentable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;polymorphic: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="c1"&gt;# この下を書くのと書かないとでは何が違う？&lt;/span&gt;
  &lt;span class="c1"&gt;# 書いたほうがComment.includes(:article)とかできて良さそうだけど&lt;/span&gt;
  &lt;span class="c1"&gt;# なにか弊害があるんだろうか？&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:article&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;foreign_key: &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;commentable_id&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:picture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;foreign_key: &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;commentable_id&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Article&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:comments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as: :commentable&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Picture&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:comments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as: :commentable&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;belongs_to :parent&lt;/code&gt; があればコードがすんなり書ける気がする。&lt;/p&gt;

&lt;h2 id="toc_9"&gt;[追記:2013-11-16]&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;belongs_to :parent&lt;/code&gt; とかけば、確かにincludesで別モデルに関するリレーションを定義できるのだけれど、SQLが複雑になって遅くなったりする。というか、そもそもpolymorphicなので、一種類の親モデルを持つわけではない。つまりbelongs_toで親になりうる全てのモデルを指定すると、それぞれのモデルインスタンスが、全てを親に持つことになってしまっておかしな定義になる。ちょっとめんどくさいけれど、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/5815612/1015770"&gt;http://stackoverflow.com/a/5815612/1015770&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にあるように、joinの定義はSQLで書くのが無難なよう。こうしたほうがいいよ、というのがあったらぜひ教えてほしい。&lt;/p&gt;

&lt;h3 id="toc_10"&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="Ruby on Railsあれこれ/findメソッドの：includeオプションの書き方 - 笑猫酒家" href="http://winter-tail.sakura.ne.jp/pukiwiki/index.php?Ruby%20on%20Rails%A4%A2%A4%EC%A4%B3%A4%EC%2Ffind%A5%E1%A5%BD%A5%C3%A5%C9%A4%CE%A1%A7include%A5%AA%A5%D7%A5%B7%A5%E7%A5%F3%A4%CE%BD%F1%A4%AD%CA%FD"&gt;Ruby on Railsあれこれ/findメソッドの：includeオプションの書き方 - 笑猫酒家&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="toc_11"&gt;[追記:2013-11-17]&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/16124295/1015770"&gt;http://stackoverflow.com/a/16124295/1015770&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記URLのSolutionも参考になる。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:article&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;foreign_key: &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;comemntable_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;conditions: &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;comments.commentable_type = &amp;#39;Article&amp;#39;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;とすれば、commentable_typeが&amp;#39;Article&amp;#39;のcommentにだけ、articleという子プロパティが作られる。
これは一回使ってみたい。&lt;/p&gt;

&lt;h2 id="toc_12"&gt;[追記:2013-11-18]&lt;/h2&gt;

&lt;p&gt;続きを書きました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="../../../2013/11/18/polymorphic-includes-joins-eager-loading.html#toc_0"&gt;polymorphicでのincludesとjoinについて&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>リファクタリングについて考えたりとか、rspecの高速化とか</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/14/refactoring-fast-rspec-with-spring.html"/>
    <id>http://blog.url.com/2013/11/14/refactoring-fast-rspec-with-spring.html</id>
    <published>2013-11-14T04:09:00Z</published>
    <updated>2013-11-22T10:07:09+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="toc_0"&gt;再度リファクタリング&lt;/h1&gt;

&lt;p&gt;ActiveDecoratorで実装してた部分をModelに移す。&amp;lt;- 見た目に関係しないコードはできるだけモデルでやる方針&lt;/p&gt;

&lt;h2 id="toc_1"&gt;方針&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;内部でhelperを使ってないコードとそうでないコードをわける&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id="toc_2"&gt;Springでrspecの高速化&lt;/h1&gt;

&lt;p&gt;単体テストを手動で走らせるのに結構時間かかるので。&lt;/p&gt;

&lt;p&gt;調べると、springというのが良さそう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="jonleighton/spring" href="https://github.com/jonleighton/spring"&gt;jonleighton/spring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;個人でつかうため、プロジェクトのGemfileは使わずにやる方法。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;gem install spring
&lt;span class="gp"&gt;$ &lt;/span&gt;spring rspec
&lt;/pre&gt;
&lt;p&gt;gem バージョンが古いというエラーが出るので、gemのアップデート&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;gem install rubygems-update
&lt;span class="gp"&gt;$ &lt;/span&gt;update_rubygems
&lt;/pre&gt;
&lt;p&gt;次のようにするといいらしい&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;gem pristine --all
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;gem pristine&lt;/code&gt;: gemの隠し場所にあるファイルからインストールしたgemを初期状態へ戻す&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;from: &lt;a title="Rubyのパッケージマネジメントシステムgem(Rubygems)のコマンド一覧" href="http://blog.layer8.sh/ja/2012/04/16/ruby%E3%81%AE%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0gemrubygems%E3%81%AE%E3%82%B3%E3%83%9E%E3%83%B3/"&gt;Rubyのパッケージマネジメントシステムgem(Rubygems)のコマンド一覧&lt;/a&gt;&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;spring rspec hoge_spec.rb
Version: 0.9.2

Usage: spring COMMAND &lt;span class="o"&gt;[&lt;/span&gt;ARGS]

Commands &lt;span class="k"&gt;for &lt;/span&gt;spring itself:
....
&lt;/pre&gt;
&lt;p&gt;あれ・・・？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="jonleighton/spring-commands-rspec" href="https://github.com/jonleighton/spring-commands-rspec"&gt;jonleighton/spring-commands-rspec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こういうのがある&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;gem install spring-commands-rspec
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;~/.spring.rb&lt;/code&gt;に次のように書く&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;spring/commands/rspec&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;spring rspec path/to/hoge_spec.rb
&lt;/pre&gt;
&lt;p&gt;成功。結構速くなって嬉しい。&lt;/p&gt;

&lt;h2 id="toc_3"&gt;参考その１&lt;/h2&gt;

&lt;p&gt;spec_helper等、specファイル中でロードエラーが出る場合。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;spring rspec path/to/hoge_spec.rb
require&lt;span class="s1"&gt;&amp;#39;: cannot load such file -- spec_helper (LoadError)
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;こんな時は、プロジェクトルートで一回&lt;code&gt;spring rspec&lt;/code&gt;を実行しておく&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;spring stop
&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$PROJECT_ROOT&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;spring rspec path/to/hoge_spec.rb
&lt;/pre&gt;
&lt;p&gt;これで、プロジェクトルートをカレントディレクトリとしてspringでrailsが読み込まれるので、requireでパスを正しく読み込める。&lt;/p&gt;

&lt;h2 id="toc_4"&gt;参考その２&lt;/h2&gt;

&lt;p&gt;emacsのrspec-modeで、上記のようにしてspringを使うと、自動ではspringがONにならない。
これはtmpにpidファイルが作られないため。
強制的にspringを使うには、次のように設定する。&lt;/p&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;rspec-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;rspec-spring-p&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;rspec-use-spring-when-possible&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;stringp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;executable-find&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;spring&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ちなみに、rspec-modeでは&lt;code&gt;C-c , v&lt;/code&gt;で開いているファイルに関連するテストだけを走らせる事ができる。&lt;/p&gt;

&lt;h2 id="toc_5"&gt;guard、使ったほうががいいですか&lt;/h2&gt;

&lt;p&gt;guardと組み合わせて使ってる人が多いみたい。guardは以前rails-tutorialやってる時に使ったけど、裏で走り続けるのがCPUの無駄使いにしか思えなくて使わなくなってしまった。guardの結果がエラーでも無視してコーディングすることも多かった。guard使ったほうがいい理由は、書いているコードが意図しない影響をもたらしてしまうことにすぐに気付いて方向修正できることなんだろうけど、commitの前にテストが通るか確認するだけでも十分な気もする。&lt;/p&gt;

&lt;h2 id="toc_6"&gt;Gitのpre-commit-hookでテスト走らせる&lt;/h2&gt;

&lt;p&gt;そんなことを考えていて、Gitのpre-commit-hookでテスト走らせればいいんじゃないかと思いつきました。同じようなことを考えた先達がいたようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="markhazlett/RSpec-Pre-commit-Git-Hook" href="https://github.com/markhazlett/RSpec-Pre-commit-Git-Hook"&gt;markhazlett/RSpec-Pre-commit-Git-Hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title="Matjaz Muhic : git pre-commit hook - commit if all RSpec tests passed" href="https://coderwall.com/p/0uuoaq"&gt;Matjaz Muhic : git pre-commit hook - commit if all RSpec tests passed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コミットにあまりに時間がかかるのは考えものですが、一回やってみてもいいかも。&lt;/p&gt;

&lt;h1 id="toc_7"&gt;Capybaraを使ったテストがOpenSSL::SSL::SSLErrorでコケる&lt;/h1&gt;

&lt;p&gt;omniauthで登録する画面でエラーが出る(OSX 10.9, ruby2.0, rails3.2.12)。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;save_and_open_page&lt;/code&gt;でブラウザ開いてみると、&lt;code&gt;OpenSSL::SSL::SSLError&lt;/code&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="OpenSSL Errors and Rails – Certificate Verify Failed · RailsApps" href="http://railsapps.github.io/openssl-certificate-verify-failed.html"&gt;OpenSSL Errors and Rails – Certificate Verify Failed · RailsApps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここの、Errors with Ruby 2.0 &amp;gt; Alternative の手順で解決。SSL証明書が古くなっていたのが原因のよう。&lt;/p&gt;

&lt;p&gt;kowabanaのローカル環境作った時からコケてて、そういうものかと放置してたのですが、@komagataさんに聞いたところ普通は全部通るとの事だったので、やっぱりか！、と思って調べてみました。&lt;/p&gt;

&lt;h1 id="toc_8"&gt;新知識&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a title="Rubyでクラスメソッドをprivateにする正しい方法 - Hello, world! - s21g" href="http://blog.s21g.com/articles/561"&gt;Rubyでクラスメソッドをprivateにする正しい方法 - Hello, world! - s21g&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a title="Rubyのアクセス制御について(protectとprivate) - おもしろWEBサービス開発日記" href="http://d.hatena.ne.jp/willnet/20080612/1213286518"&gt;Rubyのアクセス制御について(protectとprivate) - おもしろWEBサービス開発日記&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a title="Active Record scopes vs class methods | Plataformatec Blog" href="http://blog.plataformatec.com.br/2013/02/active-record-scopes-vs-class-methods/"&gt;Active Record scopes vs class methods | Plataformatec Blog&lt;/a&gt;
scopeじゃなくてClassMethodではだめなの？という疑問に対して&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>

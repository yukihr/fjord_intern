<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-11-29T12:48:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>RubyのInheritanceとMixinでのメソッドオーバーライド</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/29/ruby-inheritance-and-mixin.html"/>
    <id>http://blog.url.com/2013/11/29/ruby-inheritance-and-mixin.html</id>
    <published>2013-11-29T12:48:00Z</published>
    <updated>2013-11-29T13:03:52+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="../../../2013/11/22/rails-sass-sourcemap.html#toc_1"&gt;mixinでのメソッドオーバーライドの検証&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上の記事で、メソッドオーバーライドが予想通りに動かなくて悩んでいたのだけれど、以下のように子クラスへの&lt;code&gt;include&lt;/code&gt;を先に書くと、想定の動作となった。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Successor&lt;/span&gt;&lt;span class="nf"&gt;.class_eval&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Override1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;&lt;span class="nf"&gt;.class_eval&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Override1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;&lt;span class="nf"&gt;.new.overridden&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; &amp;#39;original&amp;#39;&lt;/span&gt;
&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Successor&lt;/span&gt;&lt;span class="nf"&gt;.new.overridden&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; &amp;#39;override 1&amp;#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;上記記事で取り組んでいたGemのソースも確かに子クラスへの&lt;code&gt;include&lt;/code&gt;が先に書かれている。
親クラスに先にincldeしてしまうと、子クラスへのincludeが無効になってしまうよう。&lt;/p&gt;

&lt;p&gt;まさか順番の違いが原因だとは思わなかったなあ。灯台下暗し。
なぜこういう動作になるのかまだよくわかってないが、もうちょっと調べてみよう。&lt;/p&gt;

&lt;p&gt;あと、Ruby2.0からはこんな場合に&lt;code&gt;prepend&lt;/code&gt;を使うといいらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="» Ruby2.0のModule#prependは如何にしてalias_method_chainを撲滅するのか！？ TECHSCORE BLOG" href="http://www.techscore.com/blog/2013/01/22/ruby2-0%E3%81%AEmodule-prepend%E3%81%AF%E5%A6%82%E4%BD%95%E3%81%AB%E3%81%97%E3%81%A6alias_method_chain%E3%82%92%E6%92%B2%E6%BB%85%E3%81%99%E3%82%8B%E3%81%AE%E3%81%8B%EF%BC%81%EF%BC%9F/"&gt;» Ruby2.0のModule#prependは如何にしてalias_method_chainを撲滅するのか！？ TECHSCORE BLOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記リンク、関数検索の優先順位についても書かれていて勉強になる。&lt;/p&gt;

&lt;p&gt;今週は作業週だったんだけれど体調を崩してしまってあまり何もできなかった。kowabanaの開発はほんとに勉強になることが多いので、ちょともったいない。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Railsのsanitizeヘルパーで違反タグを削除するのではなくエスケープする</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/28/rails-helper-sanitize-escape-bad-tags-instead-of-remove.html"/>
    <id>http://blog.url.com/2013/11/28/rails-helper-sanitize-escape-bad-tags-instead-of-remove.html</id>
    <published>2013-11-28T05:57:00Z</published>
    <updated>2013-11-29T13:03:52+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Railsのsanitizeヘルパーでは、ホワイトリストに登録されているタグ以外は削除される。この仕様だと、&lt;code&gt;sanitize &amp;quot;(&amp;gt;_&amp;lt;)なんと！(&amp;gt;_&amp;lt;)&amp;quot;&lt;/code&gt;は&lt;code&gt;(&amp;gt;__&amp;lt;)&lt;/code&gt;となってしまい、好ましくない。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;confing/initializers/escape_to_sanitize.rb&lt;/code&gt;などに以下のように書いて、違反タグを削除ではなくエスケープする仕様としてみた。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cgi&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Escape bad tags when sanitized, instead of remove.&lt;/span&gt;
&lt;span class="no"&gt;HTML&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Sanitizer&lt;/span&gt;&lt;span class="nf"&gt;.class_eval&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kp"&gt;protected&lt;/span&gt;
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tokenizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;HTML&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Tokenizer&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="nf"&gt;.next&lt;/span&gt;
      &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;HTML&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Node&lt;/span&gt;&lt;span class="nf"&gt;.parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;process_node&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;
      &lt;span class="c1"&gt;# replace bad tags with escaped HTML&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="nf"&gt;.last.nil?&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="nf"&gt;.length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;CGI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;escapeHTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;テストしてないので、意図しないバグがあるかもしれない。&lt;/p&gt;

&lt;p&gt;他に &lt;a title="rgrove/sanitize" href="https://github.com/rgrove/sanitize"&gt;rgrove/sanitize&lt;/a&gt; などを使っても良いと思う。これは、rails標準のsanitizerより柔軟な設定ができるというもので、上記のような要件なら、&lt;a title="Transfomers" href="https://github.com/rgrove/sanitize?source=cc#transformers-1"&gt;Transfomers&lt;/a&gt;をゴニョゴニョすれば実現できそう。&lt;/p&gt;

&lt;p&gt;参考）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="ruby on rails - Rails3 sanitize escape HTML rather than remove - Stack Overflow" href="http://stackoverflow.com/questions/6039128/rails3-sanitize-escape-html-rather-than-remove"&gt;ruby on rails - Rails3 sanitize escape HTML rather than remove - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>RailsでSass Sourcemapを使ってみる</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/22/rails-sass-sourcemap.html"/>
    <id>http://blog.url.com/2013/11/22/rails-sass-sourcemap.html</id>
    <published>2013-11-22T09:46:00Z</published>
    <updated>2013-11-29T13:03:52+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Rails4だと、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="vhyza/sass-rails-source-maps" href="https://github.com/vhyza/sass-rails-source-maps"&gt;vhyza/sass-rails-source-maps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を使うと、最新のChromeでSassのSourcemap(v3)が使える&lt;/p&gt;

&lt;p&gt;Gemfileに&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="ss"&gt;:development&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:test&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sass-rails-source-maps&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;と書いて、&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;bundle update sass
&lt;/pre&gt;
&lt;p&gt;として、サーバをリスタート。ChromeのDeveloper Tools &amp;gt; 設定（ギアアイコン） &amp;gt; General &amp;gt; Enable CSS source maps をオンにしておく。
これで、通常どおりの要素のインスペクトでscssファイルが表示されるはず(*.sassには未対応なのか普通のcssが表示される)。&lt;/p&gt;

&lt;p&gt;参考:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="How to make Chrome understand the Sass/SCSS in your rails app | fonicmonkey" href="http://fonicmonkey.net/2013/03/25/native-sass-scss-source-map-support-in-chrome-and-rails/"&gt;How to make Chrome understand the Sass/SCSS in your rails app | fonicmonkey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[追記:2013-11-23]&lt;/p&gt;

&lt;p&gt;Safari7でも同様にscssのインスペクトができた。&lt;/p&gt;

&lt;p&gt;さらに追記。*.sassファイルのSourcemapが作られないのは、どうやらSprocketsのメソッドのオーバーライドに失敗してるかららしい。RubyのインスタンスメソッドをModuleのメソッドでオーバーライドするにはちょっとしたノウハウが必要らしい。&lt;/p&gt;

&lt;p&gt;参考:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="rails で Mix-in するときにすでにあるメソッドをオーバーライドする - 情報建築学って何さ?" href="http://d.hatena.ne.jp/ckazu/20110523/1306152825"&gt;rails で Mix-in するときにすでにあるメソッドをオーバーライドする - 情報建築学って何さ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title="Ruby: how to override class method with a module - Byte Friendly" href="http://tech.tulentsev.com/2012/02/ruby-how-to-override-class-method-with-a-module/"&gt;Ruby: how to override class method with a module - Byte Friendly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*.scssの場合に動いてるのは、&lt;a title="sprockets/lib/sprockets/scss_template.rb at 81ee87fba59d79f9fa7b8a987c649e0125866e7f · sstephenson/sprockets" href="https://github.com/sstephenson/sprockets/blob/81ee87fba59d79f9fa7b8a987c649e0125866e7f/lib/sprockets/scss_template.rb"&gt;Sprockets::ScssTemplate&lt;/a&gt;が&lt;a title="sprockets/lib/sprockets/sass_template.rb at 81ee87fba59d79f9fa7b8a987c649e0125866e7f · sstephenson/sprockets" href="https://github.com/sstephenson/sprockets/blob/81ee87fba59d79f9fa7b8a987c649e0125866e7f/lib/sprockets/sass_template.rb"&gt;Sprockets::SassTemplate&lt;/a&gt;を継承していて、定義にはメソッドがないから、includeしたモジュールのメソッドが優先されるためかな・・・。&lt;a href="#toc_1"&gt;*1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ということで、Pullreqを送ってみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="Fix overriding Sprockets::SassTemplate#evaluate by yukihr · Pull Request #1 · vhyza/sass-rails-source-maps" href="https://github.com/vhyza/sass-rails-source-maps/pull/1"&gt;Fix overriding Sprockets::SassTemplate#evaluate by yukihr · Pull Request #1 · vhyza/sass-rails-source-maps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pullreq送るときは緊張する・・・。&lt;/p&gt;

&lt;h2 id="toc_0"&gt;Compassを一緒に使う場合、バージョンに注意&lt;/h2&gt;

&lt;p&gt;sass-rails-source-mapsがsassの3.3.0.alpha以上に依存しているので、Gemfileで次のようにバージョン指定する。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;compass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;~&amp;gt; 0.13.alpha.10&amp;#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;あと、余談ですが、compass-railsというGemを使えば設定なしでCompassが使えるはずなんだけど、&lt;/p&gt;
&lt;pre class="highlight text"&gt;`require&amp;#39;: cannot load such file -- sass/script/node (LoadError) 
&lt;/pre&gt;
&lt;p&gt;とか、compassのimportエラーが出てうまく行かない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="Rails4 beta さわってみたメモ #railshackathon - 130単位" href="http://d.hatena.ne.jp/deeeki/20121124/rails4_1st_impression"&gt;Rails4 beta さわってみたメモ #railshackathon - 130単位&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にあるように、initializers/compass.rbなどに&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="nf"&gt;.configuration.assets.paths&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Compass&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Frameworks&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;compass&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;.stylesheets_directory&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;と書くことでCompassが使えるようになった。&lt;/p&gt;

&lt;h2 id="toc_1"&gt;*1&lt;/h2&gt;

&lt;p&gt;の検証のために次のようなコードを書いてみたが、予想と異なる結果に。こうなると、元のコードがどうして動いているのかがわからない。デバッガも入れて動作を追ってみたけれど、結局分からずじまい。見逃している点がありそうで不安。まあ、間違ってたらPullreqのDiscussionで指摘してくれるだろう。&lt;/p&gt;

&lt;p&gt;&lt;a href="../../../2013/11/29/ruby-inheritance-and-mixin.html"&gt;追記：予想通りの動作が再現出来ました&lt;/a&gt;&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Original&lt;/span&gt;
  &lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Klass&lt;/span&gt;
    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;overridden&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;original&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Successor&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Klass&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;&lt;span class="nf"&gt;.new.overridden&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; &amp;#39;original&amp;#39;&lt;/span&gt;
&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Successor&lt;/span&gt;&lt;span class="nf"&gt;.new.overridden&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; &amp;#39;original&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Override1&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Override1&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Klass&lt;/span&gt;
    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;overridden&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;override 1&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;&lt;span class="nf"&gt;.class_eval&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Override1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Successor&lt;/span&gt;&lt;span class="nf"&gt;.class_eval&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Override1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;&lt;span class="nf"&gt;.new.overridden&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; &amp;#39;original&amp;#39;&lt;/span&gt;
&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Successor&lt;/span&gt;&lt;span class="nf"&gt;.new.overridden&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; &amp;#39;original&amp;#39; ここがoverride1になると期待してた :(&lt;/span&gt;

&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Override2&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Override2&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Klass&lt;/span&gt;
    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;included&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;
      &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="nf"&gt;.class_eval&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;overridden&lt;/span&gt;
          &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;override 2&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;&lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:include&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Override2&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Original::Successor.send(:include, Override2::Klass) # This isnt needed&lt;/span&gt;

&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Klass&lt;/span&gt;&lt;span class="nf"&gt;.new.overridden&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; &amp;#39;override 2&amp;#39;&lt;/span&gt;
&lt;span class="no"&gt;Original&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Successor&lt;/span&gt;&lt;span class="nf"&gt;.new.overridden&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt; &amp;#39;override 2&amp;#39;&lt;/span&gt;
&lt;/pre&gt;</content>
  </entry>
  <entry>
    <title>heroku-hk</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/22/heroku-hk.html"/>
    <id>http://blog.url.com/2013/11/22/heroku-hk.html</id>
    <published>2013-11-22T03:27:00Z</published>
    <updated>2013-11-29T13:03:52+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;HerokuのhkというCLIクライアントがGoで書かれていて高速でいいらしい、ので使ってみる。&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Heroku が公式 CLI に Go を採用。クロスプラットフォームだし、速いしという Go のメリットが生かされている。 &lt;a href="https://twitter.com/search?q=%23golangjp&amp;amp;src=hash"&gt;#golangjp&lt;/a&gt; / “heroku/hk · GitHub” &lt;a href="http://t.co/iW4n0Gaq7G"&gt;http://t.co/iW4n0Gaq7G&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jxck (@Jxck_) &lt;a href="https://twitter.com/Jxck_/statuses/393170112330477569"&gt;October 24, 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;公式の手順通りにやって躓いたところはなかった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="heroku/hk" href="https://github.com/heroku/hk#installation"&gt;heroku/hk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ heroku apps&lt;/code&gt;より&lt;code&gt;$ hk apps&lt;/code&gt;のほうが約三倍速くなって良い感じ。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Mavericksでlibv8 Gemでビルドエラー</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/20/mavericks-gem-libv8-build-error.html"/>
    <id>http://blog.url.com/2013/11/20/mavericks-gem-libv8-build-error.html</id>
    <published>2013-11-20T09:06:00Z</published>
    <updated>2013-11-29T13:03:52+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;最新版では解決されてるらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="rubygems - Installing libv8 gem on Mavericks - Stack Overflow" href="http://stackoverflow.com/questions/19577759/installing-libv8-gem-on-mavericks"&gt;rubygems - Installing libv8 gem on Mavericks - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gemfile.lockを見ると、therubyracerがlibv8のビルドエラーが出るバージョンに依存している。therubyracerのバージョンを最新にして解決。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>そろそろ１ヶ月</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/18/polymorphic-includes-joins-eager-loading.html"/>
    <id>http://blog.url.com/2013/11/18/polymorphic-includes-joins-eager-loading.html</id>
    <published>2013-11-18T05:40:00Z</published>
    <updated>2013-11-29T13:03:52+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;はやいもので、ローカルインターンに来始めてからもうすぐ1ヶ月です。
時が立つのは早い。次何するかそろそろ決めないと・・・。&lt;/p&gt;

&lt;h1 id="toc_0"&gt;polymorphicでのincludesとjoinについて&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="../../../2013/11/15/parallel_tests-rspec-refactor-git-fail.html#toc_8"&gt;polymorphicでわからないこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の続き。今までに理解できたことをまとめてみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/16124295/1015770"&gt;http://stackoverflow.com/a/16124295/1015770&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にあるように、&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;Comment&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:commentable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;polymorphic: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:article&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;foreign_key: &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;comemntable_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;conditions: &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;comments.commentable_type = &amp;#39;Article&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;のように書いておけば、commentオブジェクトのうち、&lt;code&gt;commentable_type&lt;/code&gt;が&lt;code&gt;Article&lt;/code&gt;のものについては、&lt;code&gt;comment.article&lt;/code&gt;でarticleオブジェクトにアクセスできる。さらに、&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;comments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="nf"&gt;.includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:article&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;articles.user_id = 10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;のようなクエリを発行することも可能になる。これによって、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="joins オプションとinclude オプションの決定的な違い - mic_footprints" href="http://d.hatena.ne.jp/micdonalds/20101115/1289819697"&gt;joins オプションとinclude オプションの決定的な違い - mic_footprints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にあるように、&lt;code&gt;includes&lt;/code&gt;の長所(あまり詳しくないがeager loadingというらしい)を活用することができる。&lt;/p&gt;

&lt;p&gt;ただ、&lt;code&gt;article&lt;/code&gt;オブジェクトを用いる必要があまりない場合、つまり、&lt;code&gt;article&lt;/code&gt;の情報をCommentのクエリのみに用いる場合は、&lt;code&gt;joins&lt;/code&gt;で&lt;code&gt;left join&lt;/code&gt;を使う以下の説明にあるコードのほうが、簡潔なSQLを発行出来て(comment.commentableに何回もアクセスしない場合は)速度的にも有利。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/5815612/1015770"&gt;http://stackoverflow.com/a/5815612/1015770&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;クエリの結果をどのように利用するかで、最適解が変わってくるということかな・・。&lt;/p&gt;

&lt;p&gt;ご意見、ツッコミお待ちしております＞＜&lt;/p&gt;

&lt;h1 id="toc_1"&gt;eager loadingについて調べてみる。&lt;/h1&gt;

&lt;p&gt;せっかくeager loadingが出てきたので、掘り下げて調べてみる。とりあえず参考リンク。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a title="eager loadingって何？ - おもしろWEBサービス開発日記" href="http://d.hatena.ne.jp/willnet/20090303/1236093728"&gt;eager loadingって何？ - おもしろWEBサービス開発日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title="#22 Eager Loading (revised) - RailsCasts" href="http://railscasts.com/episodes/22-eager-loading-revised"&gt;#22 Eager Loading (revised) - RailsCasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title="Ruby on Rails を高速化する" href="http://www.ibm.com/developerworks/jp/opensource/library/os-railsn1/"&gt;Ruby on Rails を高速化する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>

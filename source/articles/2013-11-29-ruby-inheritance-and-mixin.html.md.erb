---
title: RubyのInheritanceとMixinでのメソッドオーバーライド
date: 2013-11-29 21:48 JST
tags: ruby
---

<%= link_to_article 'mixinでのメソッドオーバーライドの検証', '2013/11/22/rails-sass-sourcemap.html#toc_1' %>


上の記事で、メソッドオーバーライドが予想通りに動かなくて悩んでいたのだけれど、以下のように子クラスへの`include`を先に書くと、想定の動作となった。

```ruby
Original::Successor.class_eval do
  include Override1::Klass
end

Original::Klass.class_eval do
  include Override1::Klass
end

Original::Klass.new.overridden #=> 'original'
Original::Successor.new.overridden #=> 'override 1'
```

上記記事で取り組んでいたGemのソースも確かに子クラスへの`include`が先に書かれている。
親クラスに先にincldeしてしまうと、子クラスへのincludeが無効になってしまうよう。

まさか順番の違いが原因だとは思わなかったなあ。灯台下暗し。
なぜこういう動作になるのかまだよくわかってないが、もうちょっと調べてみよう。

あと、Ruby2.0からはこんな場合に`prepend`を使うといいらしい。というか、`alias_method_chain`使うのが普通なのか。PullReq送りなおしてみるか・・・。

* [Module#prepend | TECHSCORE(テックスコア)](http://www.techscore.com/tech/Ruby/ruby-2.0/prepend/ "Module#prepend | TECHSCORE(テックスコア)")
* [» Ruby2.0のModule#prependは如何にしてalias_method_chainを撲滅するのか！？ TECHSCORE BLOG](http://www.techscore.com/blog/2013/01/22/ruby2-0%E3%81%AEmodule-prepend%E3%81%AF%E5%A6%82%E4%BD%95%E3%81%AB%E3%81%97%E3%81%A6alias_method_chain%E3%82%92%E6%92%B2%E6%BB%85%E3%81%99%E3%82%8B%E3%81%AE%E3%81%8B%EF%BC%81%EF%BC%9F/ "» Ruby2.0のModule#prependは如何にしてalias_method_chainを撲滅するのか！？ TECHSCORE BLOG")

上記リンク、関数検索の優先順位についても書かれていて勉強になる。

今週は作業週だったんだけれど体調を崩してしまって半分くらいしか活動できなかった。kowabanaの開発は勉強になることが多いのでちょともったいない。


[追記:2013-11-30]

上記の動作の原因を追ってみた。まず、`Class::ancestor`でクラスの継承・Mixin関係を見ることができるみたいなので、子クラス、親クラスの`include`順、それぞれの場合で見てみる。以前の検証コードよりも簡略化している。

まずは、親クラスに先に`include`する場合。

```ruby
class Original
  def overridden
    'original'
  end
end

class Successor < Original
end

module Override1
  def overridden
    'override 1'
  end
end

#親クラスに先にinclude
Original.class_eval do
  include Override1
end

Successor.class_eval do
  include Override1
end

Original.ancestors # => [Original, Override1, Object, Kernel, BasicObject]
Successor.ancestors # => [Successor, Original, Override1, Object, Kernel, BasicObject]
```

次に、子クラスに先に`include`する場合。

```ruby
class Original
  def overridden
    'original'
  end
end

class Successor < Original
end

module Override1
  def overridden
    'override 1'
  end
end

#子クラスに先にinclude
Successor.class_eval do
  include Override1
end

Original.class_eval do
  include Override1
end

Original.ancestors # => [Original, Override1, Object, Kernel, BasicObject]
Successor.ancestors # => [Successor, Override1, Original, Override1, Object, Kernel, BasicObject]
```

Successorの継承関係に注目。

```ruby
# 親クラスに先にinclude
Successor.ancestors # => [Successor, Original, Override1, Object, Kernel, BasicObject]
# 子クラスに先にinclude 二つ目のOverride1が追加されている
Successor.ancestors # => [Successor, Override1 , Original, Override1, Object, Kernel, BasicObject]
```

やっぱり、先にincludeするのが子クラスか親クラスによってメソッドの探索順が変わってくるよう。

このへん、rubyのソース見たら何か分かるのかなーと思ってソースを追ってみたら、そのものズバリのコメントがあった。

* [ruby/class.c at 8b0771b0142dffb45dd0d7fc18f6c2868eeb2b3b · ruby/ruby](https://github.com/ruby/ruby/blob/8b0771b0142dffb45dd0d7fc18f6c2868eeb2b3b/class.c#L862 "ruby/class.c at 8b0771b0142dffb45dd0d7fc18f6c2868eeb2b3b · ruby/ruby")

親クラスに`include`されているモジュールは子クラスで`include`できない仕様となっているよう。
このコメントと仕様を実現するロジックが加えられたコミットは次になる(Git)。

```
commit 6f1c934bc361ec5d01a0b4b1a45d07840af02dc3
Author: matz <matz@b2dd03c8-39d4-4d8f-98ff-823fe69b080e>
Date:   Tue Nov 7 08:56:18 2006 +0000

    * class.c (rb_include_module): revert duplicate inclusio
      modules.  [ruby-dev:29793]
```

ruby-devのスレッドに実装の議論がある。

* [ruby-dev jp - [ruby-dev:29793] Module duplicate](http://ruby.11.x6.nabble.com/ruby-dev-29793-Module-duplicate-td3514439.html "ruby-dev jp - [ruby-dev:29793] Module duplicate")
